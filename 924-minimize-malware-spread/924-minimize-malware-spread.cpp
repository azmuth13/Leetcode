class Solution {
public:
    
    void dfs(vector<vector<int>>& graph, int src, vector <int> &vis, int &cnt)
    {
        vis[src] = 1;
        int n = graph.size();
        
        for(int j = 0; j < n; j++)
        {
            if(graph[src][j] && !vis[j])
            {
                cnt++;
                dfs(graph,j,vis,cnt);
            }
        }
    }
    
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        
        int n = graph.size();
        int sz = initial.size();
        sort(initial.begin(),initial.end());
        int ans = 1e9;
        int result = 0;
        for(int i = 0; i < sz; i++)
        {
            int curr = 0;
            vector <int> vis(n+1,0);
            for(int j = 0; j < sz; j++)
            {
                // skip i
                
                if(i == j)
                    continue;
                
                if(!vis[initial[j]])
                {
                    int cnt = 1;
                    dfs(graph,initial[j],vis,cnt);
                    curr += cnt;
                }
                
            }
            
            if(ans > curr)
            {
                ans = curr;
                result = initial[i];
            }
            
        }
        return result;
    }
};